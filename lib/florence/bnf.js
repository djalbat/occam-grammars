"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var bnf = 'document                             ::=  ( topLevelDeclaration | verticalSpace | error )+ ;\n\n\n\ntopLevelDeclaration                  ::=  typeDeclaration \n                                           \n                                       |  variableDeclaration \n                                           \n                                       |  combinatorDeclaration \n                                           \n                                       |  constructorDeclaration \n                                           \n                                       |  disjointTypeDeclaration \n                                           \n                                       |  metavariableDeclaration \n                                           \n                                       |  dependentTypeDeclaration \n                                           \n                                       |  rule \n\n                                       |  axiom \n\n                                       |  lemma \n\n                                       |  theorem \n\n                                       |  conjecture \n\n                                       |  metaLemma \n\n                                       |  metatheorem \n\n                                       ;\n\n\n\nverticalSpace                        ::=  <END_OF_LINE>+ ;\n\n\n\nerror.                               ::=  . ;\n\n\n\ntypeDeclaration                      ::=  "Type" type ( ":" type )? <END_OF_LINE> ;\n \nvariableDeclaration                  ::=  "Variable" variable ( ":" type )? <END_OF_LINE> ;\n \ncombinatorDeclaration                ::=  "Combinator" statement... <END_OF_LINE> ;\n \nconstructorDeclaration               ::=  "Constructor" term... ( ":" type )? <END_OF_LINE> ;\n \nmetavariableDeclaration              ::=  "Metavariable" metavariable ":" metaType <END_OF_LINE> ;\n \n\n  \nrule                                 ::=  "Rule" "(" label ( "," label )* ")" <END_OF_LINE> \n\n                                          ( \n\n                                            ( "Premises" <END_OF_LINE> premise premise+ ) \n                                             \n                                            | \n                                             \n                                            ( "Premise" <END_OF_LINE> premise ) \n                                             \n                                          )?\n                                             \n                                          "Conclusion" <END_OF_LINE> conclusion \n                                           \n                                          ruleProof? ;                                         \n\nmetaLemma                            ::=  "MetaLemma" ( "(" label ( "," label )* ")" )? <END_OF_LINE> \n\n                                          (\n                                           \n                                            "Suppose" <END_OF_LINE> metaSupposition+ \n\n                                            "Then" <END_OF_LINE> \n                                             \n                                          )?\n                                            \n                                          metaConsequent\n                                                                                         \n                                          metaproof ;\n\nmetatheorem                          ::=  "Metatheorem" "(" label ( "," label )* ")" <END_OF_LINE> \n\n                                          (\n                                           \n                                            "Suppose" <END_OF_LINE> metaSupposition+ \n\n                                            "Then" <END_OF_LINE> \n                                             \n                                          )?\n                                            \n                                          metaConsequent\n                                           \n                                          metaproof ;\n\naxiom                                ::=  "Axiom" "(" label ( "," label )* ")" <END_OF_LINE> \n\n                                          (\n                                           \n                                            "Suppose" <END_OF_LINE> supposition+\n\n                                            "Then" <END_OF_LINE> \n                                             \n                                          )?\n                                             \n                                          consequent ;\n\nlemma                                ::=  "Lemma" ( "(" label ( "," label )* ")" )? <END_OF_LINE> \n\n                                          (\n                                           \n                                            "Suppose" <END_OF_LINE> supposition+\n\n                                            "Then" <END_OF_LINE> \n                                             \n                                          )?\n                                            \n                                          consequent\n                                           \n                                          proof ;\n\ntheorem                              ::=  "Theorem" "(" label ( "," label )* ")" <END_OF_LINE> \n\n                                          (\n                                           \n                                            "Suppose" <END_OF_LINE> supposition+\n\n                                            "Then" <END_OF_LINE> \n                                             \n                                          )?\n                                             \n                                          consequent\n                                           \n                                          proof ;\n\nconjecture                           ::=  "Conjecture" "(" label ( "," label )* ")" <END_OF_LINE>\n\n                                          (\n                                           \n                                            "Suppose" <END_OF_LINE> supposition+\n\n                                            "Then" <END_OF_LINE> \n                                             \n                                          )?\n                                             \n                                          consequent\n                                           \n                                          proof? ;\n\n\n\nruleProof                            ::=  "Proof" <END_OF_LINE> ruleDerivation ;\n                                          \nmetaproof                            ::=  "Proof" <END_OF_LINE> metaDerivation ;\n                                                                                         \nproof                                ::=  "Proof" <END_OF_LINE> derivation ;\n                                                                                         \n\n\nruleSubproof                         ::=  ( \n\n                                            ( "Premises" <END_OF_LINE> premise premise+ ) \n                                             \n                                            | \n                                             \n                                            ( "Premise" <END_OF_LINE> premise ) \n                                             \n                                          )\n                                            \n                                          ruleSubDerivation ; \n\nmetaSubproof                         ::=  "Suppose" <END_OF_LINE> metaSupposition+ metaSubDerivation ;\n\nsubproof                             ::=  "Suppose" <END_OF_LINE> supposition+ subDerivation ;\n\n\n\nruleDerivation                       ::=  ( \n\n                                            ruleProofStep+ \n                                            \n                                            "Therefore" <END_OF_LINE> \n                                            \n                                          )? \n                                          \n                                          lastRuleProofStep ;                                        \n\nmetaDerivation                       ::=  ( \n\n                                            metaProofStep+ \n                                            \n                                            "Therefore" <END_OF_LINE> \n                                            \n                                          )? \n                                          \n                                          lastMetaProofStep ;                                        \n\nderivation                           ::=  ( \n\n                                            proofStep+ \n                                            \n                                            "Therefore" <END_OF_LINE> \n                                            \n                                          )? \n                                          \n                                          lastProofStep ;                                        \n\n\n\nruleSubDerivation                    ::=  (\n\n                                            "Hence" <END_OF_LINE>\n\n                                            ruleProofStep+ \n                                             \n                                          )? \n                                           \n                                          "Then" <END_OF_LINE> \n                                           \n                                          lastRuleProofStep ;                                        \n\nmetaSubDerivation                    ::=  (\n\n                                            "Hence" <END_OF_LINE>\n\n                                            metaProofStep+ \n                                             \n                                          )? \n                                           \n                                          "Then" <END_OF_LINE> \n                                           \n                                          lastMetaProofStep ;                                        \n\nsubDerivation                        ::=  (\n\n                                            "Hence" <END_OF_LINE>\n\n                                            proofStep+ \n                                             \n                                          )? \n                                           \n                                          "Then" <END_OF_LINE> \n                                           \n                                          lastProofStep ;                                        \n\n\n\npremise..                            ::=  unqualifiedMetastatement \n\n                                       |  unqualifiedStatement\n                                       \n                                       ;\n\nconclusion..                         ::=  unqualifiedMetastatement \n\n                                       |  unqualifiedStatement\n                                       \n                                       ;\n\nmetaSupposition..                    ::=  unqualifiedMetastatement \n\n                                       |  unqualifiedStatement \n\n                                       |  nonsense\n                                       \n                                       ;\n\nmetaConsequent..                     ::=  unqualifiedMetastatement \n\n                                       |  unqualifiedStatement \n\n                                       |  nonsense\n                                       \n                                       ;\n\nsupposition..                        ::=  unqualifiedStatement \n\n                                       |  nonsense ;\n\nconsequent..                         ::=  unqualifiedStatement \n\n                                       |  nonsense ;\n\n\n\nruleProofStep..                      ::=  unqualifiedMetastatement \n\n                                       |  qualifiedMetastatement \n                                      \n                                       |  unqualifiedStatement \n                                      \n                                       |  qualifiedStatement \n                                      \n                                       |  ruleSubproof \n\n                                       |  nonsense \n\n                                       ;  \n\nmetaProofStep..                      ::=  unqualifiedMetastatement \n\n                                       |  qualifiedMetastatement \n                                      \n                                       |  unqualifiedStatement \n                                      \n                                       |  qualifiedStatement \n                                      \n                                       |  metaSubproof \n\n                                       |  nonsense \n\n                                       ;  \n\nproofStep..                          ::=  unqualifiedStatement \n                                      \n                                       |  qualifiedStatement \n                                      \n                                       |  subproof \n\n                                       |  nonsense \n\n                                       ;  \n\n\n\nlastRuleProofStep..                  ::=  unqualifiedMetastatement \n                                       \n                                       |  qualifiedMetastatement \n\n                                       |  nonsense \n\n                                       ;\n\nlastMetaProofStep..                  ::=  unqualifiedMetastatement \n                                       \n                                       |  qualifiedMetastatement \n\n                                       |  nonsense \n\n                                       ;\n\nlastProofStep..                      ::=  unqualifiedStatement \n                                       \n                                       |  qualifiedStatement \n\n                                       |  nonsense \n\n                                       ;\n\n\n\nunqualifiedMetastatement             ::=  metastatement... <END_OF_LINE>;\n\nqualifiedMetastatement               ::=  metastatement... ( "by" | "from" ) reference <END_OF_LINE> ;                                     \n\nunqualifiedStatement                 ::=  statement... <END_OF_LINE> ;\n\nqualifiedStatement                   ::=  statement... ( "by" | "from" ) reference <END_OF_LINE> ;\n\nnonsense                             ::=  ( [type] | [symbol] | [operator] | [special] | [secondary-keyword] | [meta-type] | [name] | [unassigned] )+ <END_OF_LINE> ;\n\n\n\nreference.                           ::=  metavariable ;\n\nlabel.                               ::=  metavariable ;\n\n\n\nmetaArgument                         ::=  statement ( ) \n\n                                       |  metaType ( ) \n                                       \n                                       ;\n\nargument                             ::=  term ( ) \n\n                                       |  type ( )\n                                       \n                                       ;\n\n\n\nmetavariable                         ::=  [name] ( <NO_WHITESPACE>"(" argument... ")" )? ;\n\nvariable                             ::=  [name] ;\n\n\n\nmetaType                             ::=  [meta-type] ;\n\ntype                                 ::=  [type] ;';
var _default = bnf;

//# sourceMappingURL=data:application/json;base64,