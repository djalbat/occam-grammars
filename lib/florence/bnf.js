"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var bnf = 'document                             ::=   ( topLevelDeclaration | verticalSpace | errorBlock )+ ;\n\n\n\ntopLevelDeclaration                  ::=   rule \n\n                                       |   axiom \n\n                                       |   lemma \n\n                                       |   theorem \n\n                                       |   conjecture \n\n                                       |   metalemma \n\n                                       |   typeDeclaration \n                                           \n                                       |   variableDeclaration \n                                           \n                                       |   combinatorDeclaration \n                                           \n                                       |   constructorDeclaration \n                                           \n                                       |   disjointTypeDeclaration \n                                           \n                                       |   metavariableDeclaration \n                                           \n                                       |   dependentTypeDeclaration \n                                           \n                                       ;\n\n\n\nverticalSpace                        ::=   <END_OF_LINE>+ ;\n\n\n\nerrorBlock                           ::=   error+ ;\n\n\n\nrule                                 ::=   "Rule" "(" label ( "," label )* ")" <END_OF_LINE> ( conditionalInference | unconditionalInference ) metaproof? ;\n\naxiom                                ::=   "Axiom" "(" label ( "," label )* ")" <END_OF_LINE> ( unconditionalIndicative | conditionalIndicative ) ; \n\nlemma                                ::=   "Lemma" ( "(" label ( "," label )* ")" )? <END_OF_LINE> ( unconditionalIndicative | conditionalIndicative ) proof ;\n\ntheorem                              ::=   "Theorem" "(" label ( "," label )* ")" <END_OF_LINE> ( unconditionalIndicative | conditionalIndicative ) proof ;\n\nconjecture                           ::=   "Conjecture" "(" label ( "," label )* ")" <END_OF_LINE> ( unconditionalIndicative | conditionalIndicative ) proof? ;\n\nmetalemma                            ::=   "Metalemma" ( "(" label ( "," label )* ")" )? <END_OF_LINE> ( metaUnconditionalIndicative | metaConditionalIndicative ) metaproof ;\n\nmetatheorem                          ::=   "Metatheorem" "(" label ( "," label )* ")" <END_OF_LINE> ( metaUnconditionalIndicative | metaConditionalIndicative ) metaproof ;\n\ntypeDeclaration                      ::=   "Type" type ( ":" type )? <END_OF_LINE> ;\n \nvariableDeclaration                  ::=   "Variable" variable ( ":" type )? <END_OF_LINE> ;\n \ncombinatorDeclaration                ::=   "Combinator" statement... <END_OF_LINE> ;\n \nconstructorDeclaration               ::=   "Constructor" term... ( ":" type )? <END_OF_LINE> ;\n \ndisjointTypeDeclaration              ::=   "DisjointType" disjointType ":" type ( "," type )+ <END_OF_LINE> ;\n                                       \nmetavariableDeclaration              ::=   "Metavariable" metavariable ":" ( "Statement" | "Context" ) <END_OF_LINE> ;\n \ndependentTypeDeclaration             ::=   "DependentType" dependentType ":" type <END_OF_LINE> ;\n                                         \n\n  \nunconditionalInference               ::=   "Conclusion" <END_OF_LINE> conclusion ;  \n\nconditionalInference                 ::=   ( \n\n                                             ( "Premises" <END_OF_LINE> premises ) \n                                             \n                                             | \n                                             \n                                             ( "Premise" <END_OF_LINE> premise ) \n                                             \n                                           )  \n\n                                           "Conclusion" <END_OF_LINE> conclusion ;\n\n\n\npremise                              ::=   unqualifiedMetastatement ;\n\npremises                             ::=   unqualifiedMetastatement unqualifiedMetastatement+ ;\n\nconclusion                           ::=   unqualifiedMetastatement ;\n\n\n\nmetaUnconditionalIndicative          ::=   metaConsequent ;\n\nunconditionalIndicative              ::=   consequent ;\n\n\n\nmetaConditionalIndicative            ::=   "Suppose" <END_OF_LINE> metaAntecedent+ \n\n                                           "Then" <END_OF_LINE> metaConsequent ;\n\nconditionalIndicative                ::=   "Suppose" <END_OF_LINE> antecedent+\n\n                                           "Then" <END_OF_LINE> consequent ;\n                                           \n\n\nmetaAntecedent                       ::=   unqualifiedMetastatement ;\n\nantecedent                           ::=   unqualifiedStatement ;\n\n\n\nmetaConsequent                       ::=   unqualifiedMetastatement ;\n\nconsequent                           ::=   unqualifiedStatement ;\n\n\n\nmetaproof                            ::=   "Proof" <END_OF_LINE> metaDerivation ;\n                                          \nproof                                ::=   "Proof" <END_OF_LINE> derivation ;\n                                                                                         \n\n\nmetaSubproof                         ::=   "Suppose" <END_OF_LINE> unqualifiedMetastatement+ metaSubDerivation ; \n\nsubproof                             ::=   "Suppose" <END_OF_LINE> unqualifiedStatement+ subDerivation ;\n                                           \n\n\nmetaDerivation                       ::=   (\n\n                                             ( metaSubproof | qualifiedMetastatement | unqualifiedMetastatement )+  \n\n                                             "Therefore" <END_OF_LINE> \n                                           \n                                           )? \n                                           \n                                           ( qualifiedMetastatement | unqualifiedMetastatement ) ;                                        \n\nderivation                           ::=   (\n\n                                             ( subproof | qualifiedStatement | unqualifiedStatement )+ \n\n                                             "Therefore" <END_OF_LINE>\n                                             \n                                           )? \n                                           \n                                           ( qualifiedStatement | unqualifiedStatement ) ;                                           \n\n\n\nmetaSubDerivation                    ::=   (\n\n                                             "Hence" <END_OF_LINE>\n\n                                             ( metaSubproof | qualifiedMetastatement | unqualifiedMetastatement )+ \n                                             \n                                           )? \n                                           \n                                           "Then" <END_OF_LINE> \n                                           \n                                           ( qualifiedMetastatement | unqualifiedMetastatement ) ;                                        \n\nsubDerivation                        ::=   (\n\n                                             "Hence" <END_OF_LINE>\n\n                                             ( subproof | qualifiedStatement | unqualifiedStatement )+ \n                                             \n                                           )? \n                                           \n                                           "Then" <END_OF_LINE> \n                                           \n                                           ( qualifiedStatement | unqualifiedStatement ) ;                                           \n\n\n\nunqualifiedMetastatement!            ::=   metastatement... <END_OF_LINE> \n\n                                       |   nonsense... <END_OF_LINE> \n                                       \n                                       ;\n\nqualifiedMetastatement!              ::=   metastatement... qualification <END_OF_LINE> \n\n                                       |   nonsense... qualification <END_OF_LINE> \n                                        \n                                       ;\n                                       \n                                       \n\nunqualifiedStatement!                ::=   statement... <END_OF_LINE>\n\n                                       |   nonsense... <END_OF_LINE> \n                                       \n                                       ;\n\nqualifiedStatement!                  ::=   statement... qualification <END_OF_LINE> \n\n                                       |   nonsense... qualification <END_OF_LINE> \n                                       \n                                       ;\n\n\n\nqualification                        ::=   "by" ( reference | "construction" )\n\n                                       |   "from" reference \n                                       \n                                       ;\n\n\n\nnonsense                             ::=   ( "by" | "from" | [type] | [operator] | [special] | [reserved] | [name] | [unassigned] )+ ;\n\n\n\nargument                             ::=   term | type ;\n\n\n\ndependentType                        ::=   [type]<NO_WHITESPACE>"(" argument ")" ;\n\ndisjointType                         ::=   [type] ;\n\ntype                                 ::=   [type] ;\n\n\n\nmetavariable                         ::=   [name] ( <NO_WHITESPACE>"(" argument ")" )? ;\n\nreference                            ::=   [name] ( <NO_WHITESPACE>"(" term... ")" )? ;\n\ncontext                              ::=   [name] ( <NO_WHITESPACE>"(" term... ")" )? ;\n\nlabel                                ::=   [name] ( <NO_WHITESPACE>"(" term... ")" )? ;\n\nvariable                             ::=   [name] ;\n\n\n\nerror                                ::=   . ;';
var _default = bnf;

//# sourceMappingURL=data:application/json;base64,