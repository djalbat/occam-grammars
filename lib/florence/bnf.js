"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var bnf = 'document                             ::=   ( topLevelInstruction | verticalSpace | error )+ ;\n\n\n\ntopLevelInstruction                  ::=   rule \n\n                                       |   axiom \n\n                                       |   lemma \n\n                                       |   theorem \n\n                                       |   conjecture \n\n                                       |   metalemma \n\n                                       |   metatheorem \n\n                                       |   metaconjecture\n\n                                       |   typeDeclaration \n                                           \n                                       |   variableDeclaration \n                                           \n                                       |   comparatorDeclaration \n                                           \n                                       |   combinatorDeclaration \n                                           \n                                       |   constructorDeclaration \n                                           \n                                       |   disjointTypeDeclaration \n                                           \n                                       |   metavariableDeclaration \n                                           \n                                       |   dependentTypeDeclaration \n                                           \n                                       |   typesDeclaration \n                                           \n                                       |   variablesDeclaration \n                                           \n                                       |   comparatorsDeclaration \n                                           \n                                       |   combinatorsDeclaration \n                                           \n                                       |   constructorsDeclaration \n                                           \n                                       |   disjointTypesDeclaration \n                                           \n                                       |   metavariablesDeclaration \n                                           \n                                       |   dependentTypesDeclaration \n                                           \n                                       ;\n\n\n\nverticalSpace                        ::=   <END_OF_LINE>+ ;\n\n\n\nerror                                ::=   . ;\n\n\n\nrule                                 ::=   "Rule" "(" label ( "," label )* ")" <END_OF_LINE> ( premise | premises )? conclusion metaproof? ;\n\naxiom                                ::=   "Axiom" "(" label ( "," label )* ")" <END_OF_LINE> ( indicativeConditional | unqualifiedStatement ) ; \n\nlemma                                ::=   "Lemma" "(" label ( "," label )* ")"? <END_OF_LINE> ( indicativeConditional | unqualifiedStatement ) proof ;\n\ntheorem                              ::=   "Theorem" "(" label ( "," label )* ")" <END_OF_LINE> ( indicativeConditional | unqualifiedStatement ) proof ;\n\nconjecture                           ::=   "Conjecture" "(" label ( "," label )* ")" <END_OF_LINE> ( indicativeConditional | unqualifiedStatement ) proof? ;\n\nmetalemma                            ::=   "Metalemma" "(" label ( "," label )* ")" <END_OF_LINE> ( metaIndicativeConditional | unqualifiedMetastatement ) metaproof ;\n\nmetatheorem                          ::=   "Metatheorem" "(" label ( "," label )* ")" <END_OF_LINE> ( metaIndicativeConditional | unqualifiedMetastatement ) metaproof ;\n\nmetaconjecture                       ::=   "Metaconjecture" "(" label ( "," label )* ")" <END_OF_LINE> ( metaIndicativeConditional | unqualifiedMetastatement ) ;\n\ntypeDeclaration                      ::=   "Type" [name] ( ":" [name] )? <END_OF_LINE> ;\n \nvariableDeclaration                  ::=   "Variable" [name] ":" [name] <END_OF_LINE> ;\n \ncomparatorDeclaration                ::=   "Comparator" statement <END_OF_LINE> ;\n \ncombinatorDeclaration                ::=   "Combinator" expression ( ":" [name] )? <END_OF_LINE> ;\n \nconstructorDeclaration               ::=   "Constructor" term ( ":" [name] )? <END_OF_LINE> ;\n \ndisjointTypeDeclaration              ::=   "DisjointType" [name] ":" [name] ( ":" [name] )? <END_OF_LINE> ;\n                                       \nmetavariableDeclaration              ::=   "Metavariable" metavariable ":" ( "Statement" | "Context" ) <END_OF_LINE> ;\n \ndependentTypeDeclaration             ::=   "DependentType" dependentType ":" [name] <END_OF_LINE> ;\n                                       \ntypesDeclaration                     ::=   "Types" [name] ( ":" [name] )? <END_OF_LINE> ;\n\nvariablesDeclaration                 ::=   "Variables" [name] ( "," [name] )+ ":" [name] <END_OF_LINE> ;\n \ncomparatorsDeclaration               ::=   "Comparators" statement ( "," statement )+ <END_OF_LINE> ;\n \ncombinatorsDeclaration               ::=   "Combinators" expression ( "," expression )+ ( ":" [name] )? <END_OF_LINE> ;\n \nconstructorsDeclaration              ::=   "Constructors" term ( "," term )+ ( ":" [name] )? <END_OF_LINE> ;\n \ndisjointTypesDeclaration             ::=   "DisjointTypes" [name] ( ":" [name] )? ":" [name] ( ":" [name] )? <END_OF_LINE> ;\n \nmetavariablesDeclaration             ::=   "Metavariables" metavariable ( "," metavariable )+ ":" ( "Statement" | "Context" ) <END_OF_LINE> ;\n \ndependentTypesDeclaration            ::=   "DependentTypes" dependentType ( "," dependentType )+ ":" [name] <END_OF_LINE> ;\n  \n\n  \npremise                              ::=   "Premise" <END_OF_LINE> unqualifiedMetastatement ;\n\npremises                             ::=   "Premises" <END_OF_LINE> unqualifiedMetastatement unqualifiedMetastatement+ ;\n\nconclusion                           ::=   "Conclusion" <END_OF_LINE> unqualifiedMetastatement ;\n\n\n\nmetaproof                            ::=   "Proof" <END_OF_LINE> \n\n                                           metastatementDefinition*\n\n                                           metaProofDerivation? \n                                          \n                                           qualifiedMetastatement ;\n                                          \n                                          \n\nmetaProofDerivation                  ::=   ( metaSublemma | qualifiedMetastatement | qualifiedStatement )+  \n\n                                           "Therefore" <END_OF_LINE> ;                                           \n\nmetaIndicativeConditional            ::=   "Suppose" <END_OF_LINE> unqualifiedMetastatement+ \n\n                                           "Hence" <END_OF_LINE> qualifiedMetastatement ;\n\nmetaSublemma                         ::=   "Suppose" <END_OF_LINE> \n\n                                           ( metaSublemma | qualifiedMetastatement | qualifiedStatement )+ \n\n                                           ( \n                                          \n                                             "Then" <END_OF_LINE> \n                                            \n                                             ( metaSublemma | qualifiedMetastatement | qualifiedStatement )+ \n                                          \n                                           )? \n                                          \n                                           "Hence" <END_OF_LINE> qualifiedMetastatement ;\n\n\n\nproof                                ::=   "Proof" <END_OF_LINE> \n\n                                           statementDefinition*\n\n                                           proofDerivation? \n                                          \n                                           qualifiedStatement ;\n                                                                                         \n                                                                                         \n                                                                                         \nproofDerivation                      ::=   ( sublemma | qualifiedStatement )+ \n\n                                           "Therefore" <END_OF_LINE> ;\n\nindicativeConditional                ::=   "Suppose" <END_OF_LINE> unqualifiedStatement+ \n\n                                           "Hence" <END_OF_LINE> qualifiedStatement ;\n\nsublemma                             ::=   "Suppose" <END_OF_LINE> \n\n                                           ( subLemma | qualifiedStatement )+ \n\n                                           ( \n                                          \n                                             "Then" <END_OF_LINE> \n                                            \n                                             ( subLemma | qualifiedStatement )+ \n                                          \n                                           )? \n                                          \n                                           "Hence" <END_OF_LINE> qualifiedStatement ;\n\n\n\nmetastatementDefinition              ::=   "Let" unqualifiedMetastatement ;                                           \n                                          \nstatementDefinition                  ::=   "Let" unqualifiedStatement ;                                           \n\n\n\nunqualifiedMetastatement!            ::=   metastatement <END_OF_LINE> \n\n                                       |   nonsense... <END_OF_LINE> \n                                       \n                                       ;\n\nqualifiedMetastatement!              ::=   metastatement qualification? <END_OF_LINE> \n\n                                       |   nonsense... qualification? <END_OF_LINE> \n                                        \n                                       ;\n\nunqualifiedStatement!                ::=   statement <END_OF_LINE>\n\n                                       |   nonsense... <END_OF_LINE> \n                                       \n                                       ;\n\nqualifiedStatement!                  ::=   statement qualification? <END_OF_LINE> \n\n                                       |   nonsense... qualification? <END_OF_LINE> \n                                       \n                                       ;\n\n\n\nnonsense                             ::=   ( "by" | "from" | [name] | [custom] | [special] | [reserved] | [unassigned] )+ ;\n\n\n\nqualification                        ::=   ( "by" | "from" ) reference ;\n\n\n\ndependentType                        ::=   [name]<NO_WHITESPACE>"(" term ")" ;\n\n\n\nmetavariable                         ::=   [name] ( <NO_WHITESPACE>"(" term ")" )? ;\n\nreference                            ::=   [name] ( <NO_WHITESPACE>"(" term ")" )? ;\n\ncontext                              ::=   [name] ( <NO_WHITESPACE>"(" term ")" )? ;\n\nlabel                                ::=   [name] ( <NO_WHITESPACE>"(" term ")" )? ;';
var _default = bnf;

//# sourceMappingURL=data:application/json;base64,