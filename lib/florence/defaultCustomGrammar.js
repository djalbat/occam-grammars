"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exports.metastatementBNF = exports.statementBNF = exports.expressionBNF = exports.termBNF = exports.lexicalPattern = void 0;
var lexicalPattern = "";
exports.lexicalPattern = lexicalPattern;
var termBNF = "term                                 ::=   name \n                                 \n                                       ;\n                                       \n                                       ";
exports.termBNF = termBNF;
var expressionBNF = "expression                           ::=   \"(\" expression \")\"\n\n                                       |   term \n                                       \n                                       ;\n                                       \n                                       ";
exports.expressionBNF = expressionBNF;
var statementBNF = "statement                            ::=   \"(\" statement \")\"\n\n                                       |   expression \"=\" expression\n                                                  \n                                       |   expression\n\n                                       ;\n\n                                       ";
exports.statementBNF = statementBNF;
var metastatementBNF = "metastatement                        ::=   \"(\" metastatement \")\"\n\n                                       |   contextDefinition \n           \n                                       |   proofAssertion\n       \n                                       |   typeAssertion \n                                                  \n                                       |   metavariable \n\n                                       |   subproof \n                                        \n                                       ;\n\ncontextDefinition                    ::=   context \"=\" ( judgement | context ) ( \",\" ( judgement | context ) )* ;\n\nproofAssertion                       ::=   context \"|-\" judgement ;\n \ntypeAssertion                        ::=   ( type | expression ) \":\" typeName \n\njudgement                            ::=   reference \"::\" metastatement ;\n\nsubproof                             ::=   \"[\" metastatement \"]\" \"...\" metastatement ;\n\n                                       ";
exports.metastatementBNF = metastatementBNF;
var _default = {
    lexicalPattern: lexicalPattern,
    termBNF: termBNF,
    expressionBNF: expressionBNF,
    statementBNF: statementBNF,
    metastatementBNF: metastatementBNF
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mbG9yZW5jZS9kZWZhdWx0Q3VzdG9tR3JhbW1hci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBsZXhpY2FsUGF0dGVybiA9IFwiXCI7XHJcblxyXG5leHBvcnQgY29uc3QgdGVybUJORiA9IGB0ZXJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgbmFtZSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA7XHJcblxyXG5leHBvcnQgY29uc3QgZXhwcmVzc2lvbkJORiA9IGBleHByZXNzaW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgXCIoXCIgZXhwcmVzc2lvbiBcIilcIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIHRlcm0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgO1xyXG5cclxuZXhwb3J0IGNvbnN0IHN0YXRlbWVudEJORiA9IGBzdGF0ZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgXCIoXCIgc3RhdGVtZW50IFwiKVwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgZXhwcmVzc2lvbiBcIj1cIiBleHByZXNzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICBleHByZXNzaW9uXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgO1xyXG5cclxuZXhwb3J0IGNvbnN0IG1ldGFzdGF0ZW1lbnRCTkYgPSBgbWV0YXN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIFwiKFwiIG1ldGFzdGF0ZW1lbnQgXCIpXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICBjb250ZXh0RGVmaW5pdGlvbiBcclxuICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIHByb29mQXNzZXJ0aW9uXHJcbiAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIHR5cGVBc3NlcnRpb24gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICBtZXRhdmFyaWFibGUgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgc3VicHJvb2YgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgO1xyXG5cclxuY29udGV4dERlZmluaXRpb24gICAgICAgICAgICAgICAgICAgIDo6PSAgIGNvbnRleHQgXCI9XCIgKCBqdWRnZW1lbnQgfCBjb250ZXh0ICkgKCBcIixcIiAoIGp1ZGdlbWVudCB8IGNvbnRleHQgKSApKiA7XHJcblxyXG5wcm9vZkFzc2VydGlvbiAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgY29udGV4dCBcInwtXCIganVkZ2VtZW50IDtcclxuIFxyXG50eXBlQXNzZXJ0aW9uICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgKCB0eXBlIHwgZXhwcmVzc2lvbiApIFwiOlwiIHR5cGVOYW1lIFxyXG5cclxuanVkZ2VtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHJlZmVyZW5jZSBcIjo6XCIgbWV0YXN0YXRlbWVudCA7XHJcblxyXG5zdWJwcm9vZiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgXCJbXCIgbWV0YXN0YXRlbWVudCBcIl1cIiBcIi4uLlwiIG1ldGFzdGF0ZW1lbnQgO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBsZXhpY2FsUGF0dGVybixcclxuICB0ZXJtQk5GLFxyXG4gIGV4cHJlc3Npb25CTkYsXHJcbiAgc3RhdGVtZW50Qk5GLFxyXG4gIG1ldGFzdGF0ZW1lbnRCTkZcclxufTtcclxuIl0sIm5hbWVzIjpbImxleGljYWxQYXR0ZXJuIiwidGVybUJORiIsImV4cHJlc3Npb25CTkYiLCJzdGF0ZW1lbnRCTkYiLCJtZXRhc3RhdGVtZW50Qk5GIl0sIm1hcHBpbmdzIjoiQUFBQSxDQUFZLFdBQUEsQ0FBQzs7O0VBQWI7NklBQUE7QUFFTyxHQUFLLENBQUNBLGNBQWMsR0FBRyxDQUFFO1FBQW5CQSxjQUFjLEdBQWRBLGNBQWMsQUFGM0I7QUFJTyxHQUFLLENBQUNDLE9BQU8sR0FBSSxDQUllO1FBSjFCQSxPQUFPLEdBQVBBLE9BQU8sQUFKcEI7QUFVTyxHQUFLLENBQUNDLGFBQWEsR0FBSSxDQU1TO1FBTjFCQSxhQUFhLEdBQWJBLGFBQWEsQUFWMUI7QUFrQk8sR0FBSyxDQUFDQyxZQUFZLEdBQUksQ0FRVTtRQVIxQkEsWUFBWSxHQUFaQSxZQUFZLEFBbEJ6QjtBQTRCTyxHQUFLLENBQUNDLGdCQUFnQixHQUFJLENBd0JNO1FBeEIxQkEsZ0JBQWdCLEdBQWhCQSxnQkFBZ0IsQUE1QjdCO2VBc0RlLENBQUM7SUFDZEosY0FBYyxFQUFkQSxjQUFjO0lBQ2RDLE9BQU8sRUFBUEEsT0FBTztJQUNQQyxhQUFhLEVBQWJBLGFBQWE7SUFDYkMsWUFBWSxFQUFaQSxZQUFZO0lBQ1pDLGdCQUFnQixFQUFoQkEsZ0JBQWdCO0FBQ2xCLENBQUM7MEJBNUREIn0=