"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var bnf = 'document              ::=  ( instruction | error )+ ;\n\n\n\ninstruction           ::=  functionDeclaration\n                        \n                        |  variablesDeclaration\n                        \n                        |  variableAssignment \n                        \n                        |  objectAssignment \n                        \n                        |  arrayAssignment\n                        \n                        |  conditionalBlock\n\n                        |  forEachLoop \n                       \n                        ;\n\n\n\nfunctionDeclaration   ::=  [type] function ;\n\nvariablesDeclaration  ::=  [type] [name] assignment? ( "," [name] assignment? )* ";" ;\n\nvariableAssignment    ::=  [name] assignment ";" ;\n\nobjectAssignment      ::=  "{" \n\n                           [type]? [name] ( "," [type]? [name] )* \n                           \n                           "}" "=" [name] ";" ;\n\narrayAssignment       ::=  "[" \n\n                           ( \n\n                             ( "_" ( "," "_" )* ( "," [type]? [name] )+ ) \n                           \n                             | \n                           \n                             ( [type]? [name] ( "," [type]? [name] )* ) \n                               \n                           ) \n                           \n                           "]" "=" [name] ";" ;\n\nconditionalBlock      ::=  "If" "(" condition ")" block ( "Else" block )? ;                                            \n\nforEachLoop           ::=  "ForEach"<NO_WHITESPACE>"(" [name] "," anonymousFunction ")" ";" ;\n\n\n             \nassignment            ::=  "=" ( functionCall | isTerminalNode | nodesQuery | nodeQuery | value ) ;\n                                          \n                                          \n                                          \nblock                 ::=  "{" ( variablesDeclaration |\n\n                                 variableAssignment | \n                        \n                                 objectAssignment | \n                        \n                                 arrayAssignment |\n                        \n                                 conditionalBlock |\n\n                                 forEachLoop )* "}" ;\n\n\n\n\nfunctionCall          ::=  [name]<NO_WHITESPACE>"(" ( [name] ( "," [name] )* )? ")" ;\n\nfunction              ::=  [name]<NO_WHITESPACE>"(" ( argument ( "," argument )* )? ")" body ;\n\nanonymousFunction     ::=  "(" ( argument ( "," argument )* )? ")" body ;\n\n\n\nisTerminalNode        ::=  "isTerminalNode"<NO_WHITESPACE>"(" [name] ")" ;\n\nnodesQuery            ::=  "nodesQuery"<NO_WHITESPACE>"(" [name] "," expression ")" ;\n\nnodeQuery             ::=  "nodeQuery"<NO_WHITESPACE>"(" [name] "," expression ")" ;\n\n\n\n\ncondition             ::=  "(" condition ")" \n\n                        |  condition ( "||" | "&&" ) condition \n\n                        |  value ( ( "!=" | "==" ) value )? \n                        \n                        ;\n\n\n\nbody                  ::=  "{" ( variablesDeclaration | \n                        \n                                 variableAssignment | \n                        \n                                 objectAssignment | \n                        \n                                 arrayAssignment |\n                        \n                                 conditionalBlock |\n\n                                 forEachLoop )* return? "}" ;\n                                 \n                                 \n\nreturn                ::=  "Return" value ";" ; \n\n\n\nvalue                 ::=  [name] | [number] | [primitive] | [string-literal] ;\n\n\n\nargument              ::=  [type] [name] ;\n\n\n\nexpression            ::=  path spread? subExpression? ;\n\npath                  ::=  "/" infiniteDescent? selectors ;\n\nsubExpression         ::=  path spread? subExpression?;\n\ninfiniteDescent       ::=  "/" ;\n\nselectors             ::=  selector ( "|" selector )* ;\n\nspread                ::=  unique\n\n                        |  "[" \n      \n                           ( \n                              \n                             ( startIndex "..." endIndex ) \n                              \n                             | \n                              \n                             ( startIndex "..." ) \n                              \n                             | \n                              \n                             ( "..." endIndex )\n                               \n                             | \n                              \n                             index \n                              \n                           )  \n                            \n                           "]" ;\n\nselector              ::=  ruleName | tokenType ;\n                   \nruleName              ::=  [name] | "*" ;\n                   \ntokenType             ::=  "@"<NO_WHITESPACE>( [name] | "*" ) ;\n                   \nstartIndex            ::=  [number] ;\n                   \nendIndex              ::=  [number] ;\n                   \nindex                 ::=  [number] ;\n                   \nunique                ::=  "!" ;\n                   \n\n\nerror.                ::=  . ;';
var _default = bnf;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mdXJ0bGUvYm5mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBibmYgPSBgZG9jdW1lbnQgICAgICAgICAgICAgIDo6PSAgKCBpbnN0cnVjdGlvbiB8IGVycm9yICkrIDtcblxuXG5cbmluc3RydWN0aW9uICAgICAgICAgICA6Oj0gIGZ1bmN0aW9uRGVjbGFyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfCAgdmFyaWFibGVzRGVjbGFyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfCAgdmFyaWFibGVBc3NpZ25tZW50IFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB8ICBvYmplY3RBc3NpZ25tZW50IFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB8ICBhcnJheUFzc2lnbm1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfCAgY29uZGl0aW9uYWxCbG9ja1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB8ICBmb3JFYWNoTG9vcCBcbiAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICA7XG5cblxuXG5mdW5jdGlvbkRlY2xhcmF0aW9uICAgOjo9ICBbdHlwZV0gZnVuY3Rpb24gO1xuXG52YXJpYWJsZXNEZWNsYXJhdGlvbiAgOjo9ICBbdHlwZV0gW25hbWVdIGFzc2lnbm1lbnQ/ICggXCIsXCIgW25hbWVdIGFzc2lnbm1lbnQ/ICkqIFwiO1wiIDtcblxudmFyaWFibGVBc3NpZ25tZW50ICAgIDo6PSAgW25hbWVdIGFzc2lnbm1lbnQgXCI7XCIgO1xuXG5vYmplY3RBc3NpZ25tZW50ICAgICAgOjo9ICBcIntcIiBcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgW3R5cGVdPyBbbmFtZV0gKCBcIixcIiBbdHlwZV0/IFtuYW1lXSApKiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ9XCIgXCI9XCIgW25hbWVdIFwiO1wiIDtcblxuYXJyYXlBc3NpZ25tZW50ICAgICAgIDo6PSAgXCJbXCIgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICggXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCBcIl9cIiAoIFwiLFwiIFwiX1wiICkqICggXCIsXCIgW3R5cGVdPyBbbmFtZV0gKSsgKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICggW3R5cGVdPyBbbmFtZV0gKCBcIixcIiBbdHlwZV0/IFtuYW1lXSApKiApIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJdXCIgXCI9XCIgW25hbWVdIFwiO1wiIDtcblxuY29uZGl0aW9uYWxCbG9jayAgICAgIDo6PSAgXCJJZlwiIFwiKFwiIGNvbmRpdGlvbiBcIilcIiBibG9jayAoIFwiRWxzZVwiIGJsb2NrICk/IDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG5mb3JFYWNoTG9vcCAgICAgICAgICAgOjo9ICBcIkZvckVhY2hcIjxOT19XSElURVNQQUNFPlwiKFwiIFtuYW1lXSBcIixcIiBhbm9ueW1vdXNGdW5jdGlvbiBcIilcIiBcIjtcIiA7XG5cblxuICAgICAgICAgICAgIFxuYXNzaWdubWVudCAgICAgICAgICAgIDo6PSAgXCI9XCIgKCBmdW5jdGlvbkNhbGwgfCBpc1Rlcm1pbmFsTm9kZSB8IG5vZGVzUXVlcnkgfCBub2RlUXVlcnkgfCB2YWx1ZSApIDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmJsb2NrICAgICAgICAgICAgICAgICA6Oj0gIFwie1wiICggdmFyaWFibGVzRGVjbGFyYXRpb24gfFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZUFzc2lnbm1lbnQgfCBcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0QXNzaWdubWVudCB8IFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheUFzc2lnbm1lbnQgfFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25hbEJsb2NrIHxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yRWFjaExvb3AgKSogXCJ9XCIgO1xuXG5cblxuXG5mdW5jdGlvbkNhbGwgICAgICAgICAgOjo9ICBbbmFtZV08Tk9fV0hJVEVTUEFDRT5cIihcIiAoIFtuYW1lXSAoIFwiLFwiIFtuYW1lXSApKiApPyBcIilcIiA7XG5cbmZ1bmN0aW9uICAgICAgICAgICAgICA6Oj0gIFtuYW1lXTxOT19XSElURVNQQUNFPlwiKFwiICggYXJndW1lbnQgKCBcIixcIiBhcmd1bWVudCApKiApPyBcIilcIiBib2R5IDtcblxuYW5vbnltb3VzRnVuY3Rpb24gICAgIDo6PSAgXCIoXCIgKCBhcmd1bWVudCAoIFwiLFwiIGFyZ3VtZW50ICkqICk/IFwiKVwiIGJvZHkgO1xuXG5cblxuaXNUZXJtaW5hbE5vZGUgICAgICAgIDo6PSAgXCJpc1Rlcm1pbmFsTm9kZVwiPE5PX1dISVRFU1BBQ0U+XCIoXCIgW25hbWVdIFwiKVwiIDtcblxubm9kZXNRdWVyeSAgICAgICAgICAgIDo6PSAgXCJub2Rlc1F1ZXJ5XCI8Tk9fV0hJVEVTUEFDRT5cIihcIiBbbmFtZV0gXCIsXCIgZXhwcmVzc2lvbiBcIilcIiA7XG5cbm5vZGVRdWVyeSAgICAgICAgICAgICA6Oj0gIFwibm9kZVF1ZXJ5XCI8Tk9fV0hJVEVTUEFDRT5cIihcIiBbbmFtZV0gXCIsXCIgZXhwcmVzc2lvbiBcIilcIiA7XG5cblxuXG5cbmNvbmRpdGlvbiAgICAgICAgICAgICA6Oj0gIFwiKFwiIGNvbmRpdGlvbiBcIilcIiBcblxuICAgICAgICAgICAgICAgICAgICAgICAgfCAgY29uZGl0aW9uICggXCJ8fFwiIHwgXCImJlwiICkgY29uZGl0aW9uIFxuXG4gICAgICAgICAgICAgICAgICAgICAgICB8ICB2YWx1ZSAoICggXCIhPVwiIHwgXCI9PVwiICkgdmFsdWUgKT8gXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIDtcblxuXG5cbmJvZHkgICAgICAgICAgICAgICAgICA6Oj0gIFwie1wiICggdmFyaWFibGVzRGVjbGFyYXRpb24gfCBcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVBc3NpZ25tZW50IHwgXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdEFzc2lnbm1lbnQgfCBcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlBc3NpZ25tZW50IHxcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uYWxCbG9jayB8XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvckVhY2hMb29wICkqIHJldHVybj8gXCJ9XCIgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcblxucmV0dXJuICAgICAgICAgICAgICAgIDo6PSAgXCJSZXR1cm5cIiB2YWx1ZSBcIjtcIiA7IFxuXG5cblxudmFsdWUgICAgICAgICAgICAgICAgIDo6PSAgW25hbWVdIHwgW251bWJlcl0gfCBbcHJpbWl0aXZlXSB8IFtzdHJpbmctbGl0ZXJhbF0gO1xuXG5cblxuYXJndW1lbnQgICAgICAgICAgICAgIDo6PSAgW3R5cGVdIFtuYW1lXSA7XG5cblxuXG5leHByZXNzaW9uICAgICAgICAgICAgOjo9ICBwYXRoIHNwcmVhZD8gc3ViRXhwcmVzc2lvbj8gO1xuXG5wYXRoICAgICAgICAgICAgICAgICAgOjo9ICBcIi9cIiBpbmZpbml0ZURlc2NlbnQ/IHNlbGVjdG9ycyA7XG5cbnN1YkV4cHJlc3Npb24gICAgICAgICA6Oj0gIHBhdGggc3ByZWFkPyBzdWJFeHByZXNzaW9uPztcblxuaW5maW5pdGVEZXNjZW50ICAgICAgIDo6PSAgXCIvXCIgO1xuXG5zZWxlY3RvcnMgICAgICAgICAgICAgOjo9ICBzZWxlY3RvciAoIFwifFwiIHNlbGVjdG9yICkqIDtcblxuc3ByZWFkICAgICAgICAgICAgICAgIDo6PSAgdW5pcXVlXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHwgIFwiW1wiIFxuICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAoIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICggc3RhcnRJbmRleCBcIi4uLlwiIGVuZEluZGV4ICkgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIHN0YXJ0SW5kZXggXCIuLi5cIiApIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCBcIi4uLlwiIGVuZEluZGV4IClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgKSAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcIl1cIiA7XG5cbnNlbGVjdG9yICAgICAgICAgICAgICA6Oj0gIHJ1bGVOYW1lIHwgdG9rZW5UeXBlIDtcbiAgICAgICAgICAgICAgICAgICBcbnJ1bGVOYW1lICAgICAgICAgICAgICA6Oj0gIFtuYW1lXSB8IFwiKlwiIDtcbiAgICAgICAgICAgICAgICAgICBcbnRva2VuVHlwZSAgICAgICAgICAgICA6Oj0gIFwiQFwiPE5PX1dISVRFU1BBQ0U+KCBbbmFtZV0gfCBcIipcIiApIDtcbiAgICAgICAgICAgICAgICAgICBcbnN0YXJ0SW5kZXggICAgICAgICAgICA6Oj0gIFtudW1iZXJdIDtcbiAgICAgICAgICAgICAgICAgICBcbmVuZEluZGV4ICAgICAgICAgICAgICA6Oj0gIFtudW1iZXJdIDtcbiAgICAgICAgICAgICAgICAgICBcbmluZGV4ICAgICAgICAgICAgICAgICA6Oj0gIFtudW1iZXJdIDtcbiAgICAgICAgICAgICAgICAgICBcbnVuaXF1ZSAgICAgICAgICAgICAgICA6Oj0gIFwiIVwiIDtcbiAgICAgICAgICAgICAgICAgICBcblxuXG5lcnJvci4gICAgICAgICAgICAgICAgOjo9ICAuIDtgO1xuXG5leHBvcnQgZGVmYXVsdCBibmY7XG4iXSwibmFtZXMiOlsiYm5mIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFvTEE7OztlQUFBOzs7QUFsTEEsSUFBTUEsTUFBTztJQWtMYixXQUFlQSJ9