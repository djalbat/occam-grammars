"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var DECIMAL = "[0-9]", GREEK = "[\\p{Script=Greek}]", LATIN = "[\\p{Script=Latin}]", LOWER_CASE_LATIN = "[\\p{Script=Latin}&&\\p{Lowercase}]", UPPER_CASE_LATIN = "[\\p{Script=Latin}&&\\p{Uppercase}]", MATHEMATICAL_SCRIPT = "[\\u{1D49C}\\u{212C}\\u{1D49E}\\u{1D49F}\\u{2130}\\u{2131}\\u{1D4A2}\\u{210B}\\u{2110}\\u{1D4A5}\\u{1D4A6}\\u{2112}\\u{2133}\\u{1D4A9}-\\u{1D4AC}\\u{211B}\\u{1D4AE}-\\u{1D4B5}\\u{1D4B6}-\\u{1D4CF}]", MATHEMATICAL_FRAKTUR = "[\\u{1D504}\\u{1D505}\\u{212D}\\u{1D507}-\\u{1D50A}\\u{210C}\\u{2111}\\u{1D50D}-\\u{1D514}\\u{211C}\\u{1D516}-\\u{1D51C}\\u{2128}\\u{1D51E}-\\u{1D537}]", MATHEMATICAL_SANS_SERIF_BOLD = "[\\u{1D5D4}-\\u{1D607}]";
var entries = [
    {
        "primary-keyword": "^(?:Rule|Axiom|Theorem|Lemma|Conjecture|MetaLemma|Metatheorem|Premises|Premise|Conclusion|Proof|Therefore|Suppose|Hence|Then|Provisional|Type|TypePrefix|Properties|Property|Variable|Constructor|Combinator|Metavariable|Given)\\b"
    },
    {
        "secondary-keyword": "^(?:is|in|an|a|of|by|because|for|satisfies|provisionally|defined|undefined|missing|present)\\b"
    },
    {
        "meta-type": "^(?:Statement|Reference|Frame)\\b"
    },
    {
        "name": "^(?:".concat(LOWER_CASE_LATIN).concat(LATIN, "+").concat(DECIMAL, "*|").concat(UPPER_CASE_LATIN).concat(LATIN, "*").concat(DECIMAL, "*)")
    },
    {
        "identifier": "^(?:".concat(LATIN, "+").concat(DECIMAL, "*|").concat(GREEK, "+|").concat(MATHEMATICAL_SCRIPT, "+|").concat(MATHEMATICAL_FRAKTUR, "+|").concat(MATHEMATICAL_SANS_SERIF_BOLD, "+)")
    },
    {
        "delimiter": "^(?:\\.\\.\\.|,|\\(|\\)|\\[|\\])"
    },
    {
        "special": "^(?:\\|-|@|::|:|=)"
    },
    {
        "unassigned": "^[^\\s\\(\\)\\[\\]:,]+"
    }
];
var _default = entries;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub21pbmFsL2VudHJpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5jb25zdCBERUNJTUFMID0gXCJbMC05XVwiLFxyXG4gICAgICBHUkVFSyA9IFwiW1xcXFxwe1NjcmlwdD1HcmVla31dXCIsXHJcbiAgICAgIExBVElOID0gXCJbXFxcXHB7U2NyaXB0PUxhdGlufV1cIixcclxuICAgICAgTE9XRVJfQ0FTRV9MQVRJTiA9IFwiW1xcXFxwe1NjcmlwdD1MYXRpbn0mJlxcXFxwe0xvd2VyY2FzZX1dXCIsXHJcbiAgICAgIFVQUEVSX0NBU0VfTEFUSU4gPSBcIltcXFxccHtTY3JpcHQ9TGF0aW59JiZcXFxccHtVcHBlcmNhc2V9XVwiLFxyXG4gICAgICBNQVRIRU1BVElDQUxfU0NSSVBUID0gXCJbXFxcXHV7MUQ0OUN9XFxcXHV7MjEyQ31cXFxcdXsxRDQ5RX1cXFxcdXsxRDQ5Rn1cXFxcdXsyMTMwfVxcXFx1ezIxMzF9XFxcXHV7MUQ0QTJ9XFxcXHV7MjEwQn1cXFxcdXsyMTEwfVxcXFx1ezFENEE1fVxcXFx1ezFENEE2fVxcXFx1ezIxMTJ9XFxcXHV7MjEzM31cXFxcdXsxRDRBOX0tXFxcXHV7MUQ0QUN9XFxcXHV7MjExQn1cXFxcdXsxRDRBRX0tXFxcXHV7MUQ0QjV9XFxcXHV7MUQ0QjZ9LVxcXFx1ezFENENGfV1cIixcclxuICAgICAgTUFUSEVNQVRJQ0FMX0ZSQUtUVVIgPSBcIltcXFxcdXsxRDUwNH1cXFxcdXsxRDUwNX1cXFxcdXsyMTJEfVxcXFx1ezFENTA3fS1cXFxcdXsxRDUwQX1cXFxcdXsyMTBDfVxcXFx1ezIxMTF9XFxcXHV7MUQ1MER9LVxcXFx1ezFENTE0fVxcXFx1ezIxMUN9XFxcXHV7MUQ1MTZ9LVxcXFx1ezFENTFDfVxcXFx1ezIxMjh9XFxcXHV7MUQ1MUV9LVxcXFx1ezFENTM3fV1cIixcclxuICAgICAgTUFUSEVNQVRJQ0FMX1NBTlNfU0VSSUZfQk9MRCA9IFwiW1xcXFx1ezFENUQ0fS1cXFxcdXsxRDYwN31dXCI7XHJcblxyXG5jb25zdCBlbnRyaWVzID0gW1xyXG4gIHtcclxuICAgIFwicHJpbWFyeS1rZXl3b3JkXCI6IFwiXig/OlJ1bGV8QXhpb218VGhlb3JlbXxMZW1tYXxDb25qZWN0dXJlfE1ldGFMZW1tYXxNZXRhdGhlb3JlbXxQcmVtaXNlc3xQcmVtaXNlfENvbmNsdXNpb258UHJvb2Z8VGhlcmVmb3JlfFN1cHBvc2V8SGVuY2V8VGhlbnxQcm92aXNpb25hbHxUeXBlfFR5cGVQcmVmaXh8UHJvcGVydGllc3xQcm9wZXJ0eXxWYXJpYWJsZXxDb25zdHJ1Y3RvcnxDb21iaW5hdG9yfE1ldGF2YXJpYWJsZXxHaXZlbilcXFxcYlwiXHJcbiAgfSxcclxuICB7XHJcbiAgICBcInNlY29uZGFyeS1rZXl3b3JkXCI6IFwiXig/OmlzfGlufGFufGF8b2Z8Ynl8YmVjYXVzZXxmb3J8c2F0aXNmaWVzfHByb3Zpc2lvbmFsbHl8ZGVmaW5lZHx1bmRlZmluZWR8bWlzc2luZ3xwcmVzZW50KVxcXFxiXCJcclxuICB9LFxyXG4gIHtcclxuICAgIFwibWV0YS10eXBlXCI6IFwiXig/OlN0YXRlbWVudHxSZWZlcmVuY2V8RnJhbWUpXFxcXGJcIlxyXG4gIH0sXHJcbiAge1xyXG4gICAgXCJuYW1lXCI6IGBeKD86JHtMT1dFUl9DQVNFX0xBVElOfSR7TEFUSU59KyR7REVDSU1BTH0qfCR7VVBQRVJfQ0FTRV9MQVRJTn0ke0xBVElOfSoke0RFQ0lNQUx9KilgLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgXCJpZGVudGlmaWVyXCI6IGBeKD86JHtMQVRJTn0rJHtERUNJTUFMfSp8JHtHUkVFS30rfCR7TUFUSEVNQVRJQ0FMX1NDUklQVH0rfCR7TUFUSEVNQVRJQ0FMX0ZSQUtUVVJ9K3wke01BVEhFTUFUSUNBTF9TQU5TX1NFUklGX0JPTER9KylgXHJcbiAgfSxcclxuICB7XHJcbiAgICBcImRlbGltaXRlclwiOiBcIl4oPzpcXFxcLlxcXFwuXFxcXC58LHxcXFxcKHxcXFxcKXxcXFxcW3xcXFxcXSlcIlxyXG4gIH0sXHJcbiAge1xyXG4gICAgXCJzcGVjaWFsXCI6IFwiXig/OlxcXFx8LXxAfDo6fDp8PSlcIlxyXG4gIH0sXHJcbiAge1xyXG4gICAgXCJ1bmFzc2lnbmVkXCI6IFwiXlteXFxcXHNcXFxcKFxcXFwpXFxcXFtcXFxcXTosXStcIlxyXG4gIH1cclxuXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGVudHJpZXM7XHJcbiJdLCJuYW1lcyI6WyJERUNJTUFMIiwiR1JFRUsiLCJMQVRJTiIsIkxPV0VSX0NBU0VfTEFUSU4iLCJVUFBFUl9DQVNFX0xBVElOIiwiTUFUSEVNQVRJQ0FMX1NDUklQVCIsIk1BVEhFTUFUSUNBTF9GUkFLVFVSIiwiTUFUSEVNQVRJQ0FMX1NBTlNfU0VSSUZfQk9MRCIsImVudHJpZXMiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQXNDQTs7O2VBQUE7OztBQXBDQSxJQUFNQSxVQUFVLFNBQ1ZDLFFBQVEsdUJBQ1JDLFFBQVEsdUJBQ1JDLG1CQUFtQix1Q0FDbkJDLG1CQUFtQix1Q0FDbkJDLHNCQUFzQix5TUFDdEJDLHVCQUF1QiwySkFDdkJDLCtCQUErQjtBQUVyQyxJQUFNQyxVQUFVO0lBQ2Q7UUFDRSxtQkFBbUI7SUFDckI7SUFDQTtRQUNFLHFCQUFxQjtJQUN2QjtJQUNBO1FBQ0UsYUFBYTtJQUNmO0lBQ0E7UUFDRSxRQUFRLEFBQUMsT0FBeUJOLE9BQW5CQyxrQkFBNEJILE9BQVRFLE9BQU0sS0FBZUUsT0FBWkosU0FBUSxNQUF1QkUsT0FBbkJFLGtCQUE0QkosT0FBVEUsT0FBTSxLQUFXLE9BQVJGLFNBQVE7SUFDN0Y7SUFDQTtRQUNFLGNBQWMsQUFBQyxPQUFlQSxPQUFURSxPQUFNLEtBQWVELE9BQVpELFNBQVEsTUFBY0ssT0FBVkosT0FBTSxNQUE0QkssT0FBeEJELHFCQUFvQixNQUE2QkUsT0FBekJELHNCQUFxQixNQUFpQyxPQUE3QkMsOEJBQTZCO0lBQ3BJO0lBQ0E7UUFDRSxhQUFhO0lBQ2Y7SUFDQTtRQUNFLFdBQVc7SUFDYjtJQUNBO1FBQ0UsY0FBYztJQUNoQjtDQUNEO0lBRUQsV0FBZUMifQ==