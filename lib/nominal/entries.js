"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var DECIMAL = "[0-9]", GREEK = "[\\p{Script=Greek}]", LATIN = "[\\p{Script=Latin}]", LATIN_LOWER_CASE = "[\\p{Script=Latin}&&\\p{Lowercase}]", LATIN_UPPER_CASE = "[\\p{Script=Latin}&&\\p{Uppercase}]", MATHEMATICAL_SANS_SERIF_BOLD = "[\\u{1D5D4}-\\u{1D607}]", MATHEMATICAL_ITALIC_UPPER_CASE = "[\\u{1D434}-\\u{1D44D}]", MATHEMATICAL_SCRIPT_UPPER_CASE = "[\\u{1D49C}\\u{212C}\\u{1D49E}\\u{1D49F}\\u{2130}\\u{2131}\\u{1D4A2}\\u{210B}\\u{2110}\\u{1D4A5}\\u{1D4A6}\\u{2112}\\u{2133}\\u{1D4A9}-\\u{1D4AC}\\u{211B}\\u{1D4AE}-\\u{1D4B5}]", MATHEMATICAL_FRAKTUR_UPPER_CASE = "[\\u{1D504}\\u{1D505}\\u{212D}\\u{1D507}-\\u{1D50A}\\u{210C}\\u{2111}\\u{1D50D}-\\u{1D514}\\u{211C}\\u{1D516}-\\u{1D51C}\\u{2128}]";
var entries = [
    {
        "primary-keyword": "^(?:Rule|Axiom|Theorem|Lemma|Conjecture|MetaLemma|Metatheorem|Premises|Premise|Conclusion|Proof|Therefore|Suppose|Hence|Then|Provisional|Type|TypePrefix|Properties|Property|Variable|Constructor|Combinator|Metavariable|Given)\\b"
    },
    {
        "secondary-keyword": "^(?:is|in|an|a|of|by|because|for|satisfies|provisionally|defined|undefined|missing|present)\\b"
    },
    {
        "meta-type": "^(?:Statement|Reference|Frame)\\b"
    },
    {
        "name": "^(?:".concat(LATIN_UPPER_CASE).concat(LATIN, "*").concat(DECIMAL, "*|").concat(LATIN_LOWER_CASE).concat(LATIN_LOWER_CASE, "+").concat(DECIMAL, "*)")
    },
    {
        "identifier": "^(?:".concat(LATIN_LOWER_CASE).concat(DECIMAL, "*|").concat(GREEK, "+|").concat(MATHEMATICAL_SANS_SERIF_BOLD, "+|").concat(MATHEMATICAL_ITALIC_UPPER_CASE, "+|").concat(MATHEMATICAL_SCRIPT_UPPER_CASE, "+|").concat(MATHEMATICAL_FRAKTUR_UPPER_CASE, "+)")
    },
    {
        "delimiter": "^(?:\\||\\.\\.\\.|\\(|\\)|\\[|\\]|<|>|,)"
    },
    {
        "special": "^(?:@|::|:|=|-)"
    },
    {
        "unassigned": "^[^\\s\\(\\)\\[\\]:,]+"
    }
];
var _default = entries;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub21pbmFsL2VudHJpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5jb25zdCBERUNJTUFMID0gXCJbMC05XVwiLFxyXG4gICAgICBHUkVFSyA9IFwiW1xcXFxwe1NjcmlwdD1HcmVla31dXCIsXHJcbiAgICAgIExBVElOID0gXCJbXFxcXHB7U2NyaXB0PUxhdGlufV1cIixcclxuICAgICAgTEFUSU5fTE9XRVJfQ0FTRSA9IFwiW1xcXFxwe1NjcmlwdD1MYXRpbn0mJlxcXFxwe0xvd2VyY2FzZX1dXCIsXHJcbiAgICAgIExBVElOX1VQUEVSX0NBU0UgPSBcIltcXFxccHtTY3JpcHQ9TGF0aW59JiZcXFxccHtVcHBlcmNhc2V9XVwiLFxyXG4gICAgICBNQVRIRU1BVElDQUxfU0FOU19TRVJJRl9CT0xEID0gXCJbXFxcXHV7MUQ1RDR9LVxcXFx1ezFENjA3fV1cIixcclxuICAgICAgTUFUSEVNQVRJQ0FMX0lUQUxJQ19VUFBFUl9DQVNFID0gXCJbXFxcXHV7MUQ0MzR9LVxcXFx1ezFENDREfV1cIixcclxuICAgICAgTUFUSEVNQVRJQ0FMX1NDUklQVF9VUFBFUl9DQVNFID0gXCJbXFxcXHV7MUQ0OUN9XFxcXHV7MjEyQ31cXFxcdXsxRDQ5RX1cXFxcdXsxRDQ5Rn1cXFxcdXsyMTMwfVxcXFx1ezIxMzF9XFxcXHV7MUQ0QTJ9XFxcXHV7MjEwQn1cXFxcdXsyMTEwfVxcXFx1ezFENEE1fVxcXFx1ezFENEE2fVxcXFx1ezIxMTJ9XFxcXHV7MjEzM31cXFxcdXsxRDRBOX0tXFxcXHV7MUQ0QUN9XFxcXHV7MjExQn1cXFxcdXsxRDRBRX0tXFxcXHV7MUQ0QjV9XVwiLFxyXG4gICAgICBNQVRIRU1BVElDQUxfRlJBS1RVUl9VUFBFUl9DQVNFID0gXCJbXFxcXHV7MUQ1MDR9XFxcXHV7MUQ1MDV9XFxcXHV7MjEyRH1cXFxcdXsxRDUwN30tXFxcXHV7MUQ1MEF9XFxcXHV7MjEwQ31cXFxcdXsyMTExfVxcXFx1ezFENTBEfS1cXFxcdXsxRDUxNH1cXFxcdXsyMTFDfVxcXFx1ezFENTE2fS1cXFxcdXsxRDUxQ31cXFxcdXsyMTI4fV1cIjtcclxuXHJcbmNvbnN0IGVudHJpZXMgPSBbXHJcbiAge1xyXG4gICAgXCJwcmltYXJ5LWtleXdvcmRcIjogXCJeKD86UnVsZXxBeGlvbXxUaGVvcmVtfExlbW1hfENvbmplY3R1cmV8TWV0YUxlbW1hfE1ldGF0aGVvcmVtfFByZW1pc2VzfFByZW1pc2V8Q29uY2x1c2lvbnxQcm9vZnxUaGVyZWZvcmV8U3VwcG9zZXxIZW5jZXxUaGVufFByb3Zpc2lvbmFsfFR5cGV8VHlwZVByZWZpeHxQcm9wZXJ0aWVzfFByb3BlcnR5fFZhcmlhYmxlfENvbnN0cnVjdG9yfENvbWJpbmF0b3J8TWV0YXZhcmlhYmxlfEdpdmVuKVxcXFxiXCJcclxuICB9LFxyXG4gIHtcclxuICAgIFwic2Vjb25kYXJ5LWtleXdvcmRcIjogXCJeKD86aXN8aW58YW58YXxvZnxieXxiZWNhdXNlfGZvcnxzYXRpc2ZpZXN8cHJvdmlzaW9uYWxseXxkZWZpbmVkfHVuZGVmaW5lZHxtaXNzaW5nfHByZXNlbnQpXFxcXGJcIlxyXG4gIH0sXHJcbiAge1xyXG4gICAgXCJtZXRhLXR5cGVcIjogXCJeKD86U3RhdGVtZW50fFJlZmVyZW5jZXxGcmFtZSlcXFxcYlwiXHJcbiAgfSxcclxuICB7XHJcbiAgICBcIm5hbWVcIjogYF4oPzoke0xBVElOX1VQUEVSX0NBU0V9JHtMQVRJTn0qJHtERUNJTUFMfSp8JHtMQVRJTl9MT1dFUl9DQVNFfSR7TEFUSU5fTE9XRVJfQ0FTRX0rJHtERUNJTUFMfSopYCxcclxuICB9LFxyXG4gIHtcclxuICAgIFwiaWRlbnRpZmllclwiOiBgXig/OiR7TEFUSU5fTE9XRVJfQ0FTRX0ke0RFQ0lNQUx9Knwke0dSRUVLfSt8JHtNQVRIRU1BVElDQUxfU0FOU19TRVJJRl9CT0xEfSt8JHtNQVRIRU1BVElDQUxfSVRBTElDX1VQUEVSX0NBU0V9K3wke01BVEhFTUFUSUNBTF9TQ1JJUFRfVVBQRVJfQ0FTRX0rfCR7TUFUSEVNQVRJQ0FMX0ZSQUtUVVJfVVBQRVJfQ0FTRX0rKWBcclxuICB9LFxyXG4gIHtcclxuICAgIFwiZGVsaW1pdGVyXCI6IFwiXig/OlxcXFx8fFxcXFwuXFxcXC5cXFxcLnxcXFxcKHxcXFxcKXxcXFxcW3xcXFxcXXw8fD58LClcIlxyXG4gIH0sXHJcbiAge1xyXG4gICAgXCJzcGVjaWFsXCI6IFwiXig/OkB8Ojp8Onw9fC0pXCJcclxuICB9LFxyXG4gIHtcclxuICAgIFwidW5hc3NpZ25lZFwiOiBcIl5bXlxcXFxzXFxcXChcXFxcKVxcXFxbXFxcXF06LF0rXCJcclxuICB9XHJcbl07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBlbnRyaWVzO1xyXG4iXSwibmFtZXMiOlsiREVDSU1BTCIsIkdSRUVLIiwiTEFUSU4iLCJMQVRJTl9MT1dFUl9DQVNFIiwiTEFUSU5fVVBQRVJfQ0FTRSIsIk1BVEhFTUFUSUNBTF9TQU5TX1NFUklGX0JPTEQiLCJNQVRIRU1BVElDQUxfSVRBTElDX1VQUEVSX0NBU0UiLCJNQVRIRU1BVElDQUxfU0NSSVBUX1VQUEVSX0NBU0UiLCJNQVRIRU1BVElDQUxfRlJBS1RVUl9VUFBFUl9DQVNFIiwiZW50cmllcyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBdUNBOzs7ZUFBQTs7O0FBckNBLElBQU1BLFVBQVUsU0FDVkMsUUFBUSx1QkFDUkMsUUFBUSx1QkFDUkMsbUJBQW1CLHVDQUNuQkMsbUJBQW1CLHVDQUNuQkMsK0JBQStCLDJCQUMvQkMsaUNBQWlDLDJCQUNqQ0MsaUNBQWlDLG9MQUNqQ0Msa0NBQWtDO0FBRXhDLElBQU1DLFVBQVU7SUFDZDtRQUNFLG1CQUFtQjtJQUNyQjtJQUNBO1FBQ0UscUJBQXFCO0lBQ3ZCO0lBQ0E7UUFDRSxhQUFhO0lBQ2Y7SUFDQTtRQUNFLFFBQVEsQUFBQyxPQUF5QlAsT0FBbkJFLGtCQUE0QkosT0FBVEUsT0FBTSxLQUFlQyxPQUFaSCxTQUFRLE1BQXVCRyxPQUFuQkEsa0JBQXVDSCxPQUFwQkcsa0JBQWlCLEtBQVcsT0FBUkgsU0FBUTtJQUN4RztJQUNBO1FBQ0UsY0FBYyxBQUFDLE9BQXlCQSxPQUFuQkcsa0JBQStCRixPQUFaRCxTQUFRLE1BQWNLLE9BQVZKLE9BQU0sTUFBcUNLLE9BQWpDRCw4QkFBNkIsTUFBdUNFLE9BQW5DRCxnQ0FBK0IsTUFBdUNFLE9BQW5DRCxnQ0FBK0IsTUFBb0MsT0FBaENDLGlDQUFnQztJQUN2TTtJQUNBO1FBQ0UsYUFBYTtJQUNmO0lBQ0E7UUFDRSxXQUFXO0lBQ2I7SUFDQTtRQUNFLGNBQWM7SUFDaEI7Q0FDRDtJQUVELFdBQWVDIn0=