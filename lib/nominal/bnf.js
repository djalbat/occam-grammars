"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var bnf = 'document                             ::=  ( topLevelDeclaration | topLevelAssertion | section | verticalSpace | error )+ ;\n\n\n\ntopLevelDeclaration                  ::=  variableDeclaration \n                                           \n                                       |  combinatorDeclaration \n                                           \n                                       |  constructorDeclaration \n                                           \n                                       |  metavariableDeclaration \n                                                                                      \n                                       |  simpleTypeDeclaration \n                                           \n                                       |  complexTypeDeclaration \n                                           \n                                       ;\n\n\n\ntopLevelAssertion                    ::=  rule \n\n                                       |  axiom \n\n                                       |  lemma \n\n                                       |  theorem \n\n                                       |  conjecture \n\n                                       |  metaLemma \n\n                                       |  metatheorem \n\n                                       ;\n\n\n\nsection                              ::=  "Given" <END_OF_LINE>\n\n                                          hypothesis+\n                                          \n                                          <END_OF_LINE>\n                                          \n                                          ( axiom \n                                          \n                                          | lemma \n                                          \n                                          | theorem \n                                          \n                                          | conjecture ) ; \n\n\n\nverticalSpace                        ::=  <END_OF_LINE>+ ;\n\n\n\nerror.                               ::=  . ;\n\n\n\nvariableDeclaration                  ::=  "Variable" variable ( ":" type "provisionally"? )? <END_OF_LINE> ;\n \ncombinatorDeclaration                ::=  "Combinator" statement... <END_OF_LINE> ;\n \nconstructorDeclaration               ::=  "Constructor" term... ( ":" type "provisionally"? )? <END_OF_LINE> ;\n \nmetavariableDeclaration              ::=  "Metavariable" metavariable... ":" metaType <END_OF_LINE> ;\n \nsimpleTypeDeclaration                ::=  "Provisional"? "Type" type ( ":" types )? <END_OF_LINE> ;\n \ncomplexTypeDeclaration               ::=  "Provisional"? "Type" <END_OF_LINE> \n\n                                          type ( ":" types )? <END_OF_LINE>\n                                          \n                                          (\n                                          \n                                            ( "Properties" <END_OF_LINE> propertyDeclaration propertyDeclaration+ ) \n                                             \n                                            | \n                                             \n                                            ( "Property" <END_OF_LINE> propertyDeclaration ) \n                                             \n                                          );\n \n\n  \nrule                                 ::=  ruleHeading ruleBody ;                                         \n\nmetaLemma                            ::=  metaLemmaHeading metaLemmaBody ;\n\nmetatheorem                          ::=  metatheoremHeading metatheoremBody ;\n\naxiom                                ::=  axiomHeading axiomBody ;\n\nlemma                                ::=  lemmaHeading lemmaBody ;\n\ntheorem                              ::=  theoremHeading theoremBody ;\n\nconjecture                           ::=  conjectureHeading conjectureBody ;\n\n\n\nruleHeading                          ::=  "Rule" parenthesisedLabels... <END_OF_LINE> ; \n\nmetaLemmaHeading                     ::=  "MetaLemma" parenthesisedLabel... <END_OF_LINE> | "MetaLemma" <END_OF_LINE> ;\n\nmetatheoremHeading                   ::=  "Metatheorem" parenthesisedLabel... <END_OF_LINE> ; \n\naxiomHeading                         ::=  "Axiom" signature? parenthesisedLabels... <END_OF_LINE> ; \n\nlemmaHeading                         ::=  "Lemma" parenthesisedLabels... <END_OF_LINE> | "Lemma" <END_OF_LINE> ; \n\ntheoremHeading                       ::=  "Theorem" parenthesisedLabels... <END_OF_LINE> ; \n\nconjectureHeading                    ::=  "Conjecture" parenthesisedLabels... <END_OF_LINE>\n\n\n\nruleBody                             ::=  ( \n\n                                            ( "Premises" <END_OF_LINE> premise premise+ ) \n                                             \n                                            | \n                                             \n                                            ( "Premise" <END_OF_LINE> premise ) \n                                             \n                                          )?\n                                             \n                                          "Conclusion" <END_OF_LINE> conclusion \n                                           \n                                          proof? ;                                         \n\nmetaLemmaBody                        ::=  (\n                                           \n                                            "Suppose" <END_OF_LINE> supposition+ \n\n                                            "Then" <END_OF_LINE> \n                                             \n                                          )?\n                                            \n                                          deduction\n                                                                                         \n                                          proof ;\n\nmetatheoremBody                      ::=  (\n                                           \n                                            "Suppose" <END_OF_LINE> supposition+ \n\n                                            "Then" <END_OF_LINE> \n                                             \n                                          )?\n                                            \n                                          deduction\n                                           \n                                          proof ;\n\naxiomBody                            ::=  (\n                                           \n                                            "Suppose" <END_OF_LINE> supposition+\n    \n                                            "Then" <END_OF_LINE> \n                                                 \n                                          )?\n                                                 \n                                          deduction ;\n\nlemmaBody                            ::=  (\n                                           \n                                            "Suppose" <END_OF_LINE> supposition+\n\n                                            "Then" <END_OF_LINE> \n                                             \n                                          )?\n                                            \n                                          deduction\n                                           \n                                          proof ;\n\ntheoremBody                          ::=  (\n                                           \n                                            "Suppose" <END_OF_LINE> supposition+\n\n                                            "Then" <END_OF_LINE> \n                                             \n                                          )?\n                                             \n                                          deduction\n                                           \n                                          proof ;\n\nconjectureBody                       ::=  (\n                                           \n                                            "Suppose" <END_OF_LINE> supposition+\n\n                                            "Then" <END_OF_LINE> \n                                             \n                                          )?\n                                             \n                                          deduction\n                                           \n                                          proof? ;\n\n\n\nproof                                ::=  "Proof" <END_OF_LINE> derivation ;\n\nsubproof                             ::=  "Suppose" <END_OF_LINE> supposition+ subDerivation ;\n\nderivation                           ::=  ( \n\n                                            ( step | subproof )+ \n                                            \n                                            "Therefore" <END_OF_LINE> \n                                            \n                                          )? \n                                          \n                                          step ;                                        \n\nsubDerivation                        ::=  (\n\n                                            "Hence" <END_OF_LINE>\n    \n                                            ( step | subproof )+ \n                                                                                         \n                                          )? \n                                           \n                                          "Then" <END_OF_LINE> \n                                           \n                                          step ;                                        \n\n\n\npropertyDeclaration.                 ::=  property ( ":" type )? <END_OF_LINE>  \n\n                                       |  nonsense... <END_OF_LINE>\n                                       \n                                       ;\n\n\n\npremise.                             ::=  procedureCall... <END_OF_LINE>  \n\n                                       |  statement... <END_OF_LINE>  \n\n                                       |  nonsense... <END_OF_LINE>\n                                       \n                                       ;\n\nsupposition.                         ::=  procedureCall... <END_OF_LINE>  \n\n                                       |  statement... <END_OF_LINE>  \n\n                                       |  nonsense... <END_OF_LINE>\n                                       \n                                       ;\n\nconclusion.                          ::=  statement... <END_OF_LINE>  \n\n                                       |  nonsense... <END_OF_LINE>\n                                       \n                                       ;\n\ndeduction.                           ::=  statement... <END_OF_LINE>  \n\n                                       |  nonsense... <END_OF_LINE>\n                                       \n                                       ;\n\nhypothesis.                          ::=  statement... <END_OF_LINE>  \n\n                                       |  nonsense... <END_OF_LINE>\n                                       \n                                       ;\n\n\n\nstep.                                ::=  statement... qualification? <END_OF_LINE>  \n\n                                       |  nonsense... qualification? <END_OF_LINE>\n                                       \n                                       ;\n\n\n\nqualification                        ::=  ( "by" | "from" ) reference\n                                                         \n                                       |  "because" satisfiesAssertion \n                                       \n                                       ; \n\n\n\nparenthesisedLabels                  ::=  "(" labels ")" ; \n\nparenthesisedLabel                   ::=  "(" label ")" ; \n\n\n\nprocedureCall                        ::=  "@"<NO_WHITESPACE>reference<NO_WHITESPACE>"(" parameter ( "," parameter )* ")" ;\n\n\n\nsignature                            ::=  "[" term ( "," term )* "]" ;\n\n\n\narguments                            ::=  argument ( "," argument )* ;\n\nlabels                               ::=  label ( "," label )* ;\n\ntypes                                ::=  type ( "," type )* ;\n\n\n\nargument                             ::=  term ( ) \n\n                                       |  type ( )\n                                       \n                                       ;\n\nmetaArgument                         ::=  statement ( ) \n\n                                       |  metaType ( ) \n                                       \n                                       ;\n\nframeArgument                        ::=  frame ( ) \n\n                                       |  metaType ( ) \n                                       \n                                       ;\n\n\n\nreference.                           ::=  metavariable ;\n\nlabel.                               ::=  metavariable ;\n\n\n\nmetavariable.                        ::=  [identifier] ( <NO_WHITESPACE> "(" ( term | type | stuff ) ")" )? ;\n\nparameter.                           ::=  [identifier] ;\n\nvariable.                            ::=  [identifier] ;\n\nproperty.                            ::=  [identifier]+ ;\n\nmetaType.                            ::=  [meta-type] ;\n\ntype.                                ::=  [type] ;\n\n\n\nstuff.                               ::=  ( [type] | [symbol] | [bracket] | [reserved] | [identifier] | [unassigned] )+ ;\n\nnonsense.                            ::=  ( [meta-type] | [special] | [secondary-keyword] | [type] | [symbol] | [bracket] | [reserved] | [identifier] | [unassigned] )+ ;';
var _default = bnf;

//# sourceMappingURL=data:application/json;base64,